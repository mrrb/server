version: '3.8'

services:
  authentik-server:
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_IMAGE_VERSION:-2023.2}
    platform: ${PLATFORM_ARCH:-linux/amd64}
    restart: unless-stopped
    container_name: authentik-server
    command: server
    networks:
      - 'server'
      - 'authentik-internal'
    environment:
      AUTHENTIK_REDIS__HOST: authentik-redis
      AUTHENTIK_POSTGRESQL__HOST: authentik-db
      AUTHENTIK_POSTGRESQL__USER: ${AUTHENTIK_POSTGRES_USER:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${AUTHENTIK_POSTGRES_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${AUTHENTIK_POSTGRES_PASSWORD:-kitnehtua}
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY:-kitnehtua}
    volumes:
      - './authentik/data/media:/media'
      - './authentik/data/custom-templates:/templates'
    ports:
      - "${AUTHENTIK_PORT_HTTP:-9000}:9000"
      - "${AUTHENTIK_PORT_HTTPS:-9443}:9443"
    user: 1000:1000
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.authentik.rule=Host(`${AUTHENTIK_HOST:-authentik.${SITE:-localhost}}`) || PathPrefix(`/outpost.goauthentik.io/`)'
      - 'traefik.http.services.authentik.loadbalancer.server.port=9000'
    depends_on:
      - authentik-db
      - authentik-redis

  authentik-worker:
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_IMAGE_VERSION:-2023.2}
    platform: ${PLATFORM_ARCH:-linux/amd64}
    restart: unless-stopped
    container_name: authentik-worker
    command: worker
    networks:
      - 'server'
      - 'authentik-internal'
    environment:
      AUTHENTIK_REDIS__HOST: authentik-redis
      AUTHENTIK_POSTGRESQL__HOST: authentik-db
      AUTHENTIK_POSTGRESQL__USER: ${AUTHENTIK_POSTGRES_USER:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${AUTHENTIK_POSTGRES_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${AUTHENTIK_POSTGRES_PASSWORD:-kitnehtua}
    user: 1000:1000
    labels:
      - 'traefik.enable=false'
    volumes:
      - '/var/run/docker.sock:/var/run/docker.sock'
      - './authentik/data/media:/media'
      - './authentik/data/certs:/certs'
      - './authentik/data/custom-templates:/templates'
    depends_on:
      authentik-db:
        condition: service_started
      authentik-redis:
        condition: service_started

  authentik-db:
    image: postgres:${POSTGRES_IMAGE_VERSION:-alpine}
    platform: ${PLATFORM_ARCH:-linux/amd64}
    restart: unless-stopped
    container_name: authentik-db
    networks:
      - 'server'
      - 'authentik-internal'
    user: 1000:1000
    healthcheck:
      test: ['CMD', 'pg_isready', '-d', '${AUTHENTIK_POSTGRES_DB:-authentik}']
      start_period: 60s
      interval: 30s
      timeout: 60s
      retries: 5
    volumes:
      - './authentik/db:/var/lib/postgresql/data'
    environment:
      - POSTGRES_PASSWORD=${AUTHENTIK_POSTGRES_PASSWORD:-kitnehtua}
      - POSTGRES_USER=${AUTHENTIK_POSTGRES_USER:-authentik}
      - POSTGRES_DB=${AUTHENTIK_POSTGRES_DB:-authentik}
    labels:
      - 'traefik.enable=false'

  authentik-redis:
    image: redis:${REDIS_IMAGE_VERSION:-alpine}
    platform: ${PLATFORM_ARCH:-linux/amd64}
    command: --save 60 1 --loglevel warning
    restart: unless-stopped
    container_name: authentik-redis
    networks:
      - 'server'
      - 'authentik-internal'
    user: 1000:1000
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 60s
      interval: 30s
      timeout: 60s
      retries: 5
    volumes:
      - './authentik/redis/:/data'
    labels:
      - 'traefik.enable=false'

networks:
  authentik-internal:
